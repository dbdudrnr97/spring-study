<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- 이 스프링 설정파일의 기본 namespace는 mvc이다. mvc태그를 제외하고, 다른 namespace는 접두어를 사용하지 않는다.  -->
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- @Controller, @Service, @Repository(Dao와 동일)  등의 mvc관련 어노테이션 처리 -->
	<annotation-driven />

	<!-- 정정파일 설정 css,js,images...-->
	<!-- : /resources로 시작하는 모든(**)요청은 /resources폴더 이하에서 조회. servlet이 처리하지않음 -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />


	<!-- ViewResolver빈 : 사용자가 보게될 응답메시지 : jsp 경로를 작성 -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	    <!-- #12.1 파일업로드를 처리할 Resolver클래스 빈등록(빈이름 주의) -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">   
		<beans:property name="maxUploadSize" value="52428800" /> <!-- multipart/form-data 요청당 최대 파일 크기는 50MB(50 * 1024 * 1024)이다. default: -1(제한없음)-->
		<beans:property name="maxUploadSizePerFile" value="10485760" /> <!-- 파일하나당 최대용량은 10MB(10 * 1024 * 1024)이다. 기본값: -1(제한없음) -->
		<beans:property name="maxInMemorySize" value="10240" /> <!-- 메모리 사용최대용량. 기본값 10240. 이값을 넘어가면, 임시파일로 저장함. -->
	</beans:bean>
	
	
	<!-- base package이하의 어노테이션(@) : @Component, @Autowired 등 빈을 등록/연결 처리 -->
	<context:component-scan base-package="com.kh.spring" />
	
	<!-- #9. Handler Interceptor 등록 -->
	<interceptors>
		<interceptor>
			<mapping path="/**" />
			<beans:bean id="loggerInterceptor" class="com.kh.spring.common.interceptor.LoggerInterceptor"/>
		</interceptor>
		<interceptor>
		<!-- /member아래 모든 요청을 맵핑하되 아래 exclude-mapping에 등록된 경로는 제외해라 -->
			<mapping path="/member/**/*.do"/>
			<mapping path="/board/**/*.do" />
			<exclude-mapping path="/board/boardList.do" />
			<exclude-mapping path="/board/boardDetail.do" />
			<exclude-mapping path="/member/login.do" />
			<exclude-mapping path="/member/memberEnroll.do" />
			<beans:bean id="loginInterceptor" class="com.kh.spring.common.interceptor.LoginInterceptor"/>
		</interceptor>
	</interceptors>
	
	<!-- #11.1 선언적 AOP관련 작성 -->
	<!-- <beans:bean id="loggerAspect" class="com.kh.spring.common.aop.LoggerAspect"/>
	
	<aop:config>
		<aop:aspect id="loggerAspect" ref="loggerAspect">
			<aop:before method="beforeAdvice" pointcut-ref="loggerPointcut"/>
			<aop:around method="aroundAdvice" pointcut-ref="loggerPointcut"/>
			<aop:pointcut expression="execution(* com.kh.spring.memo..*(..))" id="loggerPointcut"/>
			execution()이라는 함수에 아래의 값을 전달해야함 
			returnType(*) package(com.kh.spring.memo) 이하의 ..* 모든  (..) : 어떤 파라미터든
		</aop:aspect>
	</aop:config> -->
	
	<!-- #11.1 어노테이션 AOP관련 작성 -->
	 <!-- AOP관련 Annotation처리 & application-context의 aop관련설정을 servlet-context에도 적용
	 		@Transactional 또는 선언적방식 모두 필수  -->
	<aop:aspectj-autoproxy />
</beans:beans>
